---
- include_role:
    name: "microk8s"

- include_role:
    name: dt-activegate-classic
  vars:
    activegate_install_synthetic: true

- include_role:
    name: "monaco"
  vars:
    monaco_version: "v1.8.5"

- include_role:
    name: "dt-oneagent-classic"

- include_role:
    name: "app-easytravel-classic"
  vars:
    easytravel_classic_release_stage: "{{ easytravel_release_stage_ }}"

- include_role:
    name: app-easytravel-classic
    tasks_from: deploy-ingress

- set_fact:
    monaco_projects_folder: "{{ role_path }}/files/monaco/projects"

- name: Auto Remediation - Apply Monitoring as Code
  include_role:
    name: monaco
    tasks_from: apply-monaco
    apply:
      environment:
        ET_RELEASE_STAGE: "easytravel-classic"
        REMEDIATION_NAME: "Memory-Leak-Remediation-{{ ingress_domain }}"
        ANSIBLE_TEMPLATE: "http://ansible.{{ ingress_domain }}/#/templates/job_template/9"
        ANSIBLE_TEMPLATEID: 9
        ANSIBLE_USER: "dynatrace"
        ANSIBLE_PASSWORD: "dynatrace"
  vars:
    monaco_project: "easytravel"
    monaco_projects_root: "{{ monaco_projects_folder }}"

- include_role:
    name: gitea

- include_role:
    name: gitea
    tasks_from: source-secret
  when: gitea_access_token is not defined or gitea_username is not defined or gitea_password is not defined

- include_role:
    name: gitea
    tasks_from: create-organization
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"

- include_role:
    name: gitea
    tasks_from: create-repository
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"
    gitea_repo: "{{ demo_auto_remediation_repo_name }}"

- include_role:
    name: gitea
    tasks_from: create-repository
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"
    gitea_repo: "{{ demo_auto_remediation_repo_name2 }}"
- include_role:
    name: gitea
    tasks_from: create-repository
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"
    gitea_repo: "{{ demo_auto_remediation_repo_name2 }}-docs"

- include_role:
    name: gitea
    tasks_from: create-repository
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"
    gitea_repo: "{{ demo_auto_remediation_repo_name2 }}-awx"

- include_role:
    name: gitea
    tasks_from: create-repository
  vars:
    gitea_org: "{{ demo_auto_remediation_org }}"
    gitea_repo: "{{ demo_disk_auto_remediation }}"

- include_role:
    name: repository
  vars:
    repo_src: "{{ item.repo_src }}"
    git_org: "{{ item.git_org }}"
    git_repo: "{{ item.repo_target }}"
    git_username: "{{ gitea_username }}"
    git_password: "{{ gitea_password }}"
    git_domain: "{{ gitea_domain }}"
    git_remote: "gitea"
  loop:
    - {
        repo_target: "{{ demo_auto_remediation_repo_name }}",
        repo_src: "{{ role_path }}/files/repos/autoremediation-demo",
        git_org: "{{ demo_auto_remediation_org }}",
      }
    - {
        repo_target: "{{ demo_auto_remediation_repo_name2 }}-awx",
        repo_src: "{{ role_path }}/files/repos/ace-demo-canary-awx",
        git_org: "{{ demo_auto_remediation_org }}",
      }
    - {
        repo_target: "{{ demo_auto_remediation_repo_name2 }}-docs",
        repo_src: "{{ role_path }}/files/repos/ace-demo-canary-docs",
        git_org: "{{ demo_auto_remediation_org }}",
      }
    - {
        repo_target: "{{ demo_disk_auto_remediation }}",
        repo_src: "{{ role_path }}/files/repos/ace-demo-disk-remediation",
        git_org: "{{ demo_auto_remediation_org }}",
      }
  when: new_repo_created is defined and new_repo_created == true

- include_role:
    name: app-simplenode
  vars:
    git_username: "{{ gitea_username }}"
    git_password: "{{ gitea_password }}"
    git_remote: "gitea"
    git_org_name: "{{ demo_auto_remediation_org }}"
    repo_name: "{{ demo_auto_remediation_repo_name2 }}"
  when: new_repo_created is defined and new_repo_created == true

#fix to remove unwanted files from monaco project
- name: Clone the repository simplenode
  git:
    repo: "http://{{ gitea_username }}:{{ gitea_password }}@gitea.{{ ingress_domain }}/{{demo_auto_remediation_org}}/{{ demo_auto_remediation_repo_name2 }}.git"
    dest: "{{ role_path }}/files/repos/simplenode"
    version: main

- name: Remove folder with monaco config alert profile
  file:
    path: "{{ role_path }}/files/repos/simplenode/monaco/projects/canary/alerting-profile"
    state: absent
- name: Remove folder with monaco config notification
  file:
    path: "{{ role_path }}/files/repos/simplenode/monaco/projects/canary/notification"
    state: absent

- name: file folder
  ansible.builtin.shell: |
    ls -a
    cd roles 
    ls -a
    echo $(pwd)
    echo "{{ role_path }}"

  register: ps

- debug: var=ps.stdout_lines

- name: create fix file
  args:
    executable: /bin/bash
  ansible.builtin.shell: |
    cp {{ role_path }}/files/tagging.json {{ role_path }}/files/repos/simplenode/monaco/projects/canary/auto-tag/tagging.json

- name: Commit changes
  shell: |
    cd {{ role_path }}/files/repos/simplenode/ 
    git add .
    git commit -m "updated"
    git push origin main

# Include use case specific Jenkins values
- set_fact:
    include_jenkins_value_file: "{{ role_path }}/templates/demo-autorem-jobs.yml.j2"

- include_role:
    name: jenkins
    tasks_from: template-values-file
  vars:
    git_username: "{{ gitea_username }}"
    git_token: "{{ gitea_access_token }}"
    demo_repo: "{{ demo_auto_remediation_repo_name2 }}"
    demo_org: "{{ demo_auto_remediation_org }}"
    demo_jenkins_folder: "{{ demo_auto_remediation_folder }}"
    git_domain: "gitea.{{ ingress_domain }}"

- include_role:
    name: awx
    tasks_from: create-secrets

- include_role:
    name: jenkins

- include_role:
    name: "awx"

- include_tasks:
    file: create-user.yml

- include_tasks:
    file: configure-awx.yml

- include_role:
    name: app-easytravel-classic
    tasks_from: source-endpoints
# Include use case specific Dahboard values
- set_fact:
    include_dashboard_value_file: "{{ role_path }}/templates/auto-remediation-dashboard.yml.j2"

- include_role:
    name: dashboard
    tasks_from: template-values-file

- include_role:
    name: dashboard

# Trigger use case at the very end to make sure all tools are available
- include_tasks:
    file: trigger-use-case.yml

- include_role:
    name: "app-disk-filler"
  vars:
    domain: "{{ ingress_domain }}"
