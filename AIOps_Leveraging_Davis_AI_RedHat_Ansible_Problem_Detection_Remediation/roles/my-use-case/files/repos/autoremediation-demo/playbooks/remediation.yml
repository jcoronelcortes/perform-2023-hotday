---
- hosts: localhost

  tasks:
    - name: input variables values
      debug:
        msg: "dt problem id {{ pid }}"
    - name: "push comment to dynatrace"
      uri:
        url: "{{ dynatrace_environment_url }}{{ dt_comments_api }}{{ pid }}/comments"
        method: POST
        status_code: [200, 201]
        validate_certs: no
        use_proxy: no
        headers:
          Content-Type: "application/json"
          Authorization: "Api-token {{ DYNATRACE_API_TOKEN }}"
        body:
          message: 'Ansible Play Started ({{ tower_job_id | default("0") }}): {{ awx_template_name }} - Remediation started -- [Ansible Job](http://{{ awx_dns_name }}/#/jobs/playbook/{{ tower_job_id | default("0") }})'
          context: "{{ dt_comment_context }}"
        body_format: json
    - name: get entityId
      set_fact:
        dt_entity_id: "{{impactedEntities | first}}"
      when: state == "OPEN"

    - name: "get dynatrace process instance info - dt get process info"
      uri:
        url: "{{ dynatrace_environment_url }}{{ dt_infrastructure_api }}processes/{{ dt_entity_id.entity }}"
        method: GET
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Api-token {{ DYNATRACE_API_TOKEN }}"
        body_format: json
      when: state == "OPEN"
      register: dtprocessresponse

    - name: "get dynatrace process instance info - set facts from execution"
      set_fact:
        dt_process_host_id: "{{ dtprocessresponse.json.fromRelationships.isProcessOf[0] }}"
      when: state == "OPEN"

    - name: "get process hostname - dt get host info"
      uri:
        url: "{{ dynatrace_environment_url }}{{ dt_infrastructure_api }}hosts/{{ dt_process_host_id | upper }}"
        method: GET
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Api-token {{ DYNATRACE_API_TOKEN }}"
        body_format: json
      when: state == "OPEN"
      register: dthostresponse

    - name: "get process hostname - set facts from execution"
      when: state == "OPEN"
      set_fact:
        dt_process_host_ip_address: "{{ dthostresponse.json.ipAddresses[0] }}"

    - name: "stop easytravel"
      when: state == "OPEN"
      uri:
        url: "http://localhost:8094/scenario/stop"
        status_code: [200, 201]
      register: result
      delegate_to: "{{ dt_process_host_ip_address }}"

    - name: "sleep for 30 seconds"
      when: state == "OPEN"
      wait_for:
        timeout: 30

    - name: "start easytravel"
      when: state == "OPEN"
      uri:
        url: "http://localhost:8094/scenario/start/UEM/Standard"
        status_code: [200, 201]
      register: result
      delegate_to: "{{ dt_process_host_ip_address }}"

    - name: "wait for easytravel portal to come up"
      when: state == "OPEN"
      uri:
        url: "http://localhost:8080/"
        status_code: [200, 201]
      register: result
      until: result.status == 200 or result.status == 201
      retries: 15
      delay: 10
      delegate_to: "{{ dt_process_host_ip_address }}"

    - name: "push comment to dynatrace"
      when: state == "OPEN"
      uri:
        url: "{{ dynatrace_environment_url }}{{ dt_comments_api }}{{ pid }}/comments"
        method: POST
        status_code: [200, 201]
        validate_certs: no
        use_proxy: no
        headers:
          Content-Type: "application/json"
          Authorization: "Api-token {{ DYNATRACE_API_TOKEN }}"
        body:
          message: 'Ansible Play Started ({{ tower_job_id | default("0") }}): {{ awx_template_name }} - Remediation completed successfully -- [Ansible Job](http://{{ awx_dns_name }}/#/jobs/playbook/{{ tower_job_id | default("0") }})'
          context: "{{ dt_comment_context }}"
        body_format: json

    - name: "sleep for 30 seconds"
      wait_for:
        timeout: 30
